1. Valid Parentheses

class Solution {
public:
    bool isValid(string s) 
    {
        stack <char> stk;
        for(char c:s)
        {
            if(c == '(' || c == '{' || c == '[')
            {
                stk.push(c);
            }
            else
            {
                if(stk.empty())
                {
                    return false;
                }

                if(c == ')' && stk.top() == '(')
                {
                    stk.pop();
                }
                else if(c == '}' && stk.top() == '{')
                {
                    stk.pop();
                }
                else if(c == ']' && stk.top() == '[')
                {
                    stk.pop();
                }
                else
                {
                    return false;
                }
            }
        }
        return stk.empty();
    }
};


=============================================================================


2. Next Greater element to the Right

class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) 
    {
        vector<int> vec;
        for(int i=0;i<nums.size();i++)
        {
            bool flag = false;
            int k = i+1;
            int index = INT_MIN;

            while(index != i)
            {
                index = k % nums.size();
                if(nums[index] > nums[i])
                {
                    flag = true;
                    vec.push_back(nums[index]);
                    break;
                }
                k++;
            }
            if(!flag)
            {
                vec.push_back(-1);
            }
        }
        return vec;
    }
};

=============================================================================

3. Next Greater Element to the left
        
        class Solution {
        public:
            vector<int> left(vector<int>& nums){
                vector<int> ans;
                stack<int> st;
                for(int i = 0; i < nums.size(); i++) {
                    while(!st.empty() && st.top() < nums[i])
                        st.pop();
                    if(st.empty())
                        ans.push_back(-1);
                    else
                        ans.push_back(st.top());
                    st.push(nums[i]);
                }
                return ans;
            }
        };

=============================================================================

4. Next Smaller element to the Left

#include <iostream>
#include<vector>
#include<algorithm>
#include<stack>
using namespace std;

int main() {
    int j=0,n;
    cout<<"Enter the size of arry:-";
    cin>>n;
    int arr[n];
    cout<<"Enter the elements of the array:-";
    for(j=0;j<n;j++)
    {
        cin>>arr[j];
    }
    reverse(arr,arr+n);
    vector<long long >rs;
    stack<long long >st;
    for(int i=n-1;i>=0;i--)
    {
        if(st.empty())
        rs.push_back(-1);
        else if(arr[i]>st.top())
        rs.push_back(st.top());
        else{
        while(!st.empty() && arr[i]<=st.top())
        {
            st.pop();
        }
        if(st.empty())
        rs.push_back(-1);
        else
        rs.push_back(st.top());
        }
         st.push(arr[i]);
    }
    reverse(rs.begin(),rs.end());
    for(int k=rs.size()-1;k>=0;k--)
    {
        cout<<rs[k]<<" ";
    }
    
    return 0;
}

=============================================================================

5. Next Smaller Element to the Right

#include <iostream>
#include<vector>
#include<algorithm>
#include<stack>
using namespace std;

int main() {
    int j=0,n;
    cout<<"Enter the size of arry:-";
    cin>>n;
    int arr[n];
    cout<<"Enter the elements of the array:-";
    for(j=0;j<n;j++)
    {
        cin>>arr[j];
    }
    reverse(arr,arr+n);
    vector<long long >rs;
    stack<long long >st;
    for(int i=n-1;i>=0;i--)
    {
        if(st.empty())
        rs.push_back(-1);
        else if(arr[i]>st.top())
        rs.push_back(st.top());
        else{
        while(!st.empty() && arr[i]<=st.top())
        {
            st.pop();
        }
        if(st.empty())
        rs.push_back(-1);
        else
        rs.push_back(st.top());
        }
         st.push(arr[i]);
    }
    reverse(rs.begin(),rs.end());
    for(int k=rs.size()-1;k>=0;k--)
    {
        cout<<rs[k]<<" ";
    }
    
    return 0;
}